{"version":3,"file":"static/js/583.41f2f488.chunk.js","mappings":"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","sources":["components/Form/Form.styled.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Form/Form.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormPhonebook = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  row-gap: 25px;\n\n  margin-bottom: 40px;\n`;\n\nexport const FormInput = styled.input`\n  padding: 15px 10px;\n  width: 350px;\n  outline: none;\n  background-color: #bababa;\n  border-radius: 10px;\n  font-size: 16px;\n\n  &:focus {\n    border-color: #5eff5e;\n    box-shadow: inset 2px 1px 10px 0px rgba(94, 255, 94, 1);\n    transition: box-shadow 250ms linear;\n    transition: border-color 250ms linear;\n  }\n`;\n\nexport const FormLeable = styled.label`\n  position: absolute;\n  top: -20px;\n  left: 15px;\n\n  font-size: 16px;\n  font-weight: 600;\n\n  color: #9b9b9b;\n`;\nexport const FormButtonSubmit = styled.button`\n  width: 250px;\n\n  margin-left: auto;\n  margin-right: auto;\n\n  padding: 10px 10px;\n\n  border-radius: 10px;\n  font-size: 16px;\n  color: #252525;\n  background-color: #bababa;\n  transition: box-shadow 250ms linear;\n  transition: color 250ms linear;\n  &:hover,\n  &:focus {\n    transition: box-shadow 250ms linear;\n    box-shadow: inset 2px 1px 15px 0px rgba(94, 255, 94, 1);\n    color: #ffffff;\n    transition: color 250ms linear;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const ListContact = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n\n  gap: 13px;\n`;\n\nexport const ListContactItem = styled.li`\n  display: flex;\n\n  align-items: center;\n  justify-content: space-between;\n  gap: 25px;\n\n  padding: 15px 20px;\n\n  border: 2px solid rgba(94, 255, 94, 1);\n  border-radius: 6px;\n\n  background-color: #292929;\n  box-shadow: inset 2px 1px 10px 0px rgba(94, 255, 94, 1);\n`;\n\nexport const ListContactInfo = styled.p`\n  margin-bottom: 0;\n\n  font-size: 18px;\n\n  color: #5eff5e;\n  text-shadow: 1px 1px 2px rgba(140, 246, 99, 1);\n`;\n\nexport const ListRemoveBtn = styled.button`\n  padding: 10px 25px;\n\n  border-radius: 10px;\n\n  background-color: #292929;\n  color: #5eff5e;\n\n  font-size: 15px;\n  font-weight: 700;\n  border-color: #03ae03;\n  transition: box-shadow 250ms linear;\n\n  :hover,\n  :focus {\n    box-shadow: inset 2px 1px 10px 0px rgba(94, 255, 94, 1);\n    transition: box-shadow 250ms linear;\n  }\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  ListContact,\n  ListContactItem,\n  ListContactInfo,\n  ListRemoveBtn,\n} from './ContactList.styled';\nimport {\n  contactsSelector,\n  filterSelector,\n  selectIsLoading,\n} from 'redux/selectors';\nimport { deleteContact, fetchContacts } from 'redux/operations';\n\nconst ConatctList = () => {\n  const contacts = useSelector(contactsSelector);\n  const filters = useSelector(filterSelector);\n  const isLoad = useSelector(selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filtredListContact = contacts.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(filters.toLocaleLowerCase())\n  );\n  return (\n    <>\n      {isLoad && <h2 style={{ color: '#ffffff' }}>please wait loading...</h2>}\n      <ListContact>\n        {filtredListContact.map(contact => (\n          <ListContactItem key={contact.id}>\n            <ListContactInfo>\n              {contact.name}: {contact.number}\n            </ListContactInfo>\n            <ListRemoveBtn\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              remove\n            </ListRemoveBtn>\n          </ListContactItem>\n        ))}\n      </ListContact>\n    </>\n  );\n};\nexport default ConatctList;\n","import styled from '@emotion/styled';\n\nexport const Fiterlable = styled.label`\n  font-size: 18px;\n  font-weight: 600;\n  margin-right: 15px;\n  color: #9b9b9b;\n`;\nexport const FilterInput = styled.input`\n  padding: 10px 15px;\n\n  border-radius: 10px;\n  border-color: ${({ theme }) => theme.colors.prymeryBgColor};\n  outline: none;\n\n  font-size: 19px;\n\n  width: 200px;\n  transition: background-color 250ms linear;\n  background-color: #bababa;\n  &:focus {\n    border-color: #5eff5e;\n    box-shadow: inset 2px 1px 10px 0px rgba(94, 255, 94, 1);\n    transition: box-shadow 250ms linear;\n    transition: border-color 250ms linear;\n  }\n`;\n\nexport const BlockLable = styled.div`\n  margin-bottom: 30px;\n`;\n","import { Fiterlable, FilterInput, BlockLable } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filtred } from 'redux/Slices/FilterSlice';\nimport { filterSelector } from 'redux/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(filterSelector);\n\n  const filtarValue = ({ target }) => {\n    dispatch(filtred(target.value));\n  };\n\n  return (\n    <BlockLable>\n      <Fiterlable htmlFor=\"filter\">Find contacts by name :</Fiterlable>\n      <FilterInput\n        type=\"text\"\n        value={filter}\n        onChange={filtarValue}\n        id=\"filter\"\n      />\n    </BlockLable>\n  );\n};\nexport default Filter;\n","import { useState } from 'react';\nimport {\n  FormPhonebook,\n  FormInput,\n  FormLeable,\n  FormButtonSubmit,\n} from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelector } from 'redux/selectors';\nimport { addContactPost } from 'redux/operations';\nimport Notiflix from 'notiflix';\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(contactsSelector);\n  const handleChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const dispatch = useDispatch();\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const nameInputValue = evt.target.elements.name.value;\n    const numberInputValue = evt.target.elements.number.value;\n    const checkContact = contacts.find(\n      contact => contact.name === nameInputValue\n    );\n    if (checkContact) {\n      // window.alert(`${nameInputValue} is already in contacts.`);\n      Notiflix.Notify.failure(\n        `${nameInputValue} is already in contacts.`,\n\n        {\n          timeout: 3500,\n          position: 'center-top',\n        }\n      );\n      return;\n    }\n    const newContact = {\n      name: nameInputValue,\n      number: numberInputValue,\n    };\n    Notiflix.Notify.success('New contact added');\n    dispatch(addContactPost(newContact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <FormPhonebook autoComplete=\"off\" onSubmit={handleSubmit}>\n      <div style={{ position: 'relative' }}>\n        <FormLeable htmlFor=\"name\">Name</FormLeable>\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n          id=\"name\"\n          placeholder=\"Enter name\"\n        />\n      </div>\n      <div style={{ position: 'relative' }}>\n        <FormLeable htmlFor=\"number\">Phone</FormLeable>\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n          id=\"number\"\n          placeholder=\"Enter number\"\n        />\n      </div>\n      <FormButtonSubmit type=\"submit\">Add contact</FormButtonSubmit>\n    </FormPhonebook>\n  );\n};\nexport default Form;\n","import styled from '@emotion/styled';\n\nexport const ContactsTitle = styled.h1`\n  color: #9b9b9b;\n  text-align: center;\n  font-size: 40px;\n\n  margin-bottom: 50px;\n`;\nexport const ContactsSeaction = styled.section`\n  padding-top: 50px;\n  text-align: center;\n`;\n","import ConatctList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport Form from 'components/Form/Form';\nimport { ContactsSeaction, ContactsTitle } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <ContactsSeaction>\n      <ContactsTitle>Phonebook</ContactsTitle>\n      <Form />\n      <h2\n        style={{\n          color: '#9b9b9b',\n        }}\n      >\n        Contacts\n      </h2>\n      <Filter />\n      <ConatctList />\n    </ContactsSeaction>\n  );\n};\nexport default Contacts;\n"],"names":["FormPhonebook","styled","FormInput","FormLeable","FormButtonSubmit","ListContact","ListContactItem","ListContactInfo","ListRemoveBtn","contacts","useSelector","contactsSelector","filters","filterSelector","isLoad","selectIsLoading","dispatch","useDispatch","useEffect","fetchContacts","filtredListContact","filter","contact","name","toLocaleLowerCase","includes","style","color","map","number","type","onClick","deleteContact","id","Fiterlable","FilterInput","theme","colors","prymeryBgColor","BlockLable","htmlFor","value","onChange","target","filtred","useState","setName","setNumber","handleChange","evt","currentTarget","reset","autoComplete","onSubmit","preventDefault","nameInputValue","elements","numberInputValue","find","Notiflix","timeout","position","newContact","addContactPost","pattern","title","required","placeholder","ContactsTitle","ContactsSeaction"],"sourceRoot":""}